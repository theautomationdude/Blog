<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on theAutomationDude</title>
        <link>https://theautomationdude.github.io/blog/posts/</link>
        <description>Recent content in Posts on theAutomationDude</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 11 Jan 2022 22:05:32 +0100</lastBuildDate>
        <atom:link href="https://theautomationdude.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Azure Management Groups, as Code</title>
            <link>https://theautomationdude.github.io/blog/posts/managementgroups/</link>
            <pubDate>Tue, 11 Jan 2022 22:05:32 +0100</pubDate>
            
            <guid>https://theautomationdude.github.io/blog/posts/managementgroups/</guid>
            <description>This guide will give you an introduction to use Management Groups in Azure and how to create them as code. If you want to try this out yourself as a lab, you must first ensure that you have the pre-requisites ready.
This guide depends on the following:    Tool Link     Azure Bicep Cli Bicep Cli install instructions   VSCode + Bicep Extension Getting Up And Ready With VSCode and VSCode Productivity hints   Azure Powershell Setup Azure Powershell    Azure Account Register Free Azure Account    User account with sufficient privileges to create Management Groups in the Tenant Root group Register Free Azure Account (See the &amp;ldquo;Enable Management Groups&amp;rdquo; section)    ManagementGroup Structure ManagementGroups are basically containers that contains your organisations subscriptions.</description>
            <content type="html"><![CDATA[<p>This guide will give you an introduction to use Management Groups in Azure and how to create them as code.
If you want to try this out yourself as a lab, you must first ensure that you have the pre-requisites ready.</p>
<h5 id="this-guide-depends-on-the-following">This guide depends on the following:</h5>
<table>
<thead>
<tr>
<th>Tool</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>Azure Bicep Cli</td>
<td><a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/install">Bicep Cli install instructions</a></td>
</tr>
<tr>
<td>VSCode + Bicep Extension</td>
<td><a href="/blog/posts/gettingupandreadywithvscode/">Getting Up And Ready With VSCode</a> and <a href="/blog/posts/vscodeproductivity/">VSCode Productivity hints</a></td>
</tr>
<tr>
<td>Azure Powershell</td>
<td><a href="/blog/posts/setupazpowershell/">Setup Azure Powershell </a></td>
</tr>
<tr>
<td>Azure Account</td>
<td><a href="/blog/posts/RegisterFreeAzureAccount/">Register Free Azure Account </a></td>
</tr>
<tr>
<td>User account with sufficient privileges to create Management Groups in the Tenant Root group</td>
<td><a href="/blog/posts/registerfreeazureaccount/">Register Free Azure Account</a> (<em>See the &ldquo;Enable Management Groups&rdquo; section</em>)</td>
</tr>
</tbody>
</table>
<h1 id="managementgroup-structure">ManagementGroup Structure</h1>
<p>ManagementGroups are basically containers that contains your organisations subscriptions.
By defining Roles and Policies and assigning those to ManagementGroups, the definitions and assignments of those will be inherited down the hierarchy to other management groups subscriptions, resourcegroups and finally resources.</p>
<p><img src="scope-levels.png" alt="Scope-levels"></p>
<p>For enterprise scale Azure environments this is a very good governance tool. The management group structure cascades down from the &ldquo;Tenant Root Group&rdquo; which is the first Management group that Azure automatically creates for you, <strong>this group cannot be deleted and will allways be the top scope</strong>.</p>
<p>By default no user has any privileges on the Tenant Root Group, but a</p>
<h2 id="the-microsoft-cloud-adoption-framework">The Microsoft Cloud Adoption Framework</h2>
<p>Microsoft has developed architectural guidelines for cloud adoption - the <a href="https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/">Microsoft Cloud Adoption framework</a> which is a proven framework for successful cloud adoption. I strongly recommend that you give it a good read before implementing Azure for an organization. Bundled with this is also a lot of templates and artifacts that you can use as base for your Azure landing zones, have a look at this <a href="https://github.com/Azure/Enterprise-Scale">Enterprise Scale Github repository</a>. This will give you the foundation from where you can define your Azure Landing Zones - the templates for any new subscriptions you issue for your organization.</p>
<h2 id="defining-your-management-group-structure---as-code">Defining your Management Group Structure - as code</h2>
<p>You can build your management group structure from the Azure portal, but by defining it as code, you will get a version controlled, modular and reusable deployment method.</p>
<p>The management group structure we will deploy for lab purposes will be based on one that Microsoft have examplified in the picture below for Microsofts favourite example organization - <em>Contoso</em>. You can modify this structure to fit your organization, but I recommend you to stay as close to the Microsoft model as possible.</p>
<p><img src="managementgroup-structure.png" alt="Managementgroup-structure"></p>
<p>I have made an <a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/overview">Azure Bicep</a> file that represents the modified deployment we will to make to the tenant root group. <strong>Open or download the <a href="main.bicep">bicep file</a></strong>, but I suggest you just use it as support for writing your own file, just to get the hands on practice with Bicep and VSCode.</p>
<h4 id="targetscope">targetScope</h4>
<p>The <a href="main.bicep">file</a> starts with the statement <code>targetScope = 'managementGroup'</code>, this tells Bicep that this deployment is going to be deployed to the management group scope, and the syntax used in the template will be analyzed from that perspective. If you start typing <code>tar</code> and press <code>Ctrl+Space</code>, the VSCode Bicep extension intellisense will suggest the word <code>targetscope</code>, accept it by pressing enter.
<img src="targetscope-intellisense.png" alt="targetscope intellisense"></p>
<p>To get the syntax in VSCode with the bicep extension you can write the keyword like <code>targetscope =</code>.
VSCode will suggest <code>'managementGroup'</code> if you press <code>Ctrl+Space</code>, you scroll down with your arrow keys and accept the suggestion by pressing enter.
<img src="managementgroup-intellisense.png" alt="managementgroup intellisense"></p>
<h3 id="resource">resource</h3>
<p>Next you need to define your organizations top level management group that will be deployed in the Tenant Root Group. Start by typing the keyword <code>resource</code>, if intellisense pops up the word for you, just accept the suggestion with enter. 
<img src="resource-intellisense.png" alt="Resource">
Next add the name for this bicep resource, I&rsquo;ll use the same name (MyOrgName) for the resource as the name for the managment group. Other related resources can refer to properties of this resource by referencing the resourcename.propertyname, it will be clearer as we move along. You can use your organisation name like Microsoft have used the &ldquo;Contoso&rdquo; in their example.</p>
<p>Next you press <code>Ctrl+Space</code> to select the resource type. You can start typing <code>managementGroups</code> or simply scroll all the way through the list with arrowkeys and <code>PageUp</code> / <code>PageDown</code> keys until you find the resource. Confirm the list-item with the <code>Enter</code> key. Next VSCode should ask you for the API-version, if not you just press <code>Ctrl+Space</code> to get that syntax suggestion. I usually choose the latest API-version. Just keep using <code>Ctrl+Space</code> arrowkeys and enter to get the syntax suggestions for <code>=</code> and <code>required properties</code>.</p>
<h4 id="name">Name</h4>
<p>Now you should have the <code>name:</code> tag there encapsulated by <code>{ }</code>. Enter a name for your top management group (I used &lsquo;MyOrgName&rsquo;) encapsulated by <code>' '</code>.</p>
<h4 id="scope">Scope</h4>
<p>In the line after the <code>name</code> tag, press <code>Ctrl+Space</code> and select <code>scope</code>, then use the tenant() <em>function</em> as scope.</p>
<h4 id="display-name">Display Name</h4>
<p>Keep using the <code>Ctrl+Space</code>to build the resource definition. The <code>displayName</code>is a subkey to the <code>properties</code> key and can be the same as <code>name</code> or a more verbose descriptive name that will be shown in the overview in the Azure portal. The <code>name</code> is the unique identifier for this management group.</p>
<h4 id="parent">Parent</h4>
<p>The parent key is a reference to where in the management group structure this management group will be located. By referencing the id of the parent management group it will be a child to that one.</p>
<p><strong>Now things might get a little confusing, but the Bicep extension will help you getting things right!</strong> (Doing the same thing with ARM-json is much worse, I promise!)</p>
<p>You will reference the <strong>management group id</strong> in the <code>id</code> key which is a subkey to the <code>parent</code> key. The <em>parent</em> key is inside the <code>details</code> key which is inside the <code>properties</code> key. You get a lot of navigation assistance for the hierarchy of the Bicep code from the indentation, bracket colors and the guides to the left.
<img src="top-level-mgmtgroup.png" alt="bicep key hierarchy"></p>
<p>To specify the id of the target management group for this deployment (in this case the Tenant Root group) you can use the Bicep function <code>managementGroup().id</code>.</p>
<h3 id="next-resource">Next resource</h3>
<p>When you are done with the first management group you just repeat the same procedure again (hint, use copy paste and modify some fields). The name for the bicep <em>resource</em>, and the tags <code>name</code>, <code>displayname</code> and <code>id</code> are the values you need to change for each management group resource you define. All the <code>id</code> tags for the <code>parent</code> property is now referencing slightly different. Instead of using the <code>managementGroup().id</code> function, you reference the object <code>id</code> property of the parent management group you want the resource to child of with dot-referencing the <code>id</code> property of the parent object; <code>id: MyOrgName.id</code>. For a child of the <strong>&lsquo;Platform&rsquo;</strong> management group the reference would be <code>id:Platform.id</code> instead. It&rsquo;s as easy as that!</p>
<h2 id="deploying-the-management-groups">Deploying the management groups</h2>
<p>When your file is completed and free of errors you can deploy it with PowerShell or Azure cli, I prefer PowerShell so that&rsquo;s what this guide will use.</p>
<h2 id="find-the-tenant-id">Find the Tenant ID</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Powershell" data-lang="Powershell">Connect-AzAccount
$Tenant = Get-AzTenant
$ManagementGroup = Get-AzManagementGroup $Tenant.TenantId
</code></pre></div><p>You can now check the details for your top level Management Group stored in the <em>$Managementgroup</em> variable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Powershell" data-lang="Powershell">$ManagementGroup

Id                <span style="color:#960050;background-color:#1e0010">:</span> /providers/Microsoft.Management/managementGroups/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
Type              <span style="color:#960050;background-color:#1e0010">:</span> /providers/Microsoft.Management/managementGroups
Name              <span style="color:#960050;background-color:#1e0010">:</span> xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
TenantId          <span style="color:#960050;background-color:#1e0010">:</span> xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
DisplayName       <span style="color:#960050;background-color:#1e0010">:</span> Tenant Root Group
UpdatedTime       <span style="color:#960050;background-color:#1e0010">:</span> 2021-12-28 17<span style="color:#960050;background-color:#1e0010">:</span>31<span style="color:#960050;background-color:#1e0010">:</span>33
UpdatedBy         <span style="color:#960050;background-color:#1e0010">:</span>
ParentId          <span style="color:#960050;background-color:#1e0010">:</span>
ParentName        <span style="color:#960050;background-color:#1e0010">:</span>
ParentDisplayName <span style="color:#960050;background-color:#1e0010">:</span>
</code></pre></div><h2 id="deploying">Deploying</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Powershell" data-lang="Powershell">New-AzManagementGroupDeployment -ManagementGroupId $ManagementGroup.Id -Templatefile <span style="color:#e6db74">&#34;.\main.bicep&#34;</span> -Name <span style="color:#e6db74">&#39;MananagementGroupsDeployment&#39;</span> -Location <span style="color:#e6db74">&#39;WestEurope&#39;</span>
</code></pre></div><p>Please note that for <em>Location</em> you can use your location of preference.</p>
<h1 id="move-the-existing-subscription-into-a-management-group-with-powershell">Move the existing subscription into a management group with PowerShell</h1>
<p>The quickest and easiest way to move a subscription into a management group is by using Azure Powershell or Azure Cli.To use PowerShell you just use the New-AzManagementGroupSubscription cmdlet as below. (replace the subscriptionId with the id of the subscription you want to move and the GroupId with the management group you want to move it into)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Powershell" data-lang="Powershell"><span style="color:#75715e">#Alternative 1: Using variables to supply the parameters</span>
$SubscriptionId = <span style="color:#e6db74">&#39;12345678-1234-1234-1234-123456789012&#39;</span>
$GroupId = <span style="color:#e6db74">&#39;Corp&#39;</span>

New-AzManagementGroupSubscription -GroupId $GroupId -SubscriptionId $SubscriptionId

<span style="color:#75715e">#Alternative 2: Using splatting to supply the parameters</span>
$Params = @{
  SubscriptionId = <span style="color:#e6db74">&#39;12345678-1234-1234-1234-123456789012&#39;</span>
  GroupId = <span style="color:#e6db74">&#39;Corp&#39;</span>
}

New-AzManagementGroupSubscription @Params

<span style="color:#75715e">#Alternative 3: Using splatting with parameters in the hashtable, useful in a script where you are iterating through a loop</span>
$SubscriptionId = <span style="color:#e6db74">&#39;12345678-1234-1234-1234-123456789012&#39;</span>
$GroupId = <span style="color:#e6db74">&#39;Corp&#39;</span>

$Params = @{
  SubscriptionId = $SubscriptionId
  GroupId = $GroupId
}

New-AzManagementGroupSubscription @Params

<span style="color:#75715e">#Alternative 4: Just supplying the values to each parameter without variables</span>

New-AzManagementGroupSubscription -GroupId <span style="color:#e6db74">&#39;Corp&#39;</span> -SubscriptionId <span style="color:#e6db74">&#39;12345678-1234-1234-1234-123456789012&#39;</span>
</code></pre></div><h1 id="moving-the-subscription-with-bicep">Moving the subscription with Bicep</h1>
<p>You can also move the subscription by deploying an ARM or Bicep template file. This example uses Bicep, and I recommend Bicep over ARM except for the few cases where there is some Bicep limitation leaving you without a choice. Microsoft is still developing Bicep, but it already has a great coverage in Azure.</p>
<p><strong>Download this <a href="movesubscription.bicep">Bicep File</a></strong>, then deploy the template with Azure PowerShell.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Powershell" data-lang="Powershell"><span style="color:#75715e">#Splatting parameters to make it more readable</span>
$Params = @{
    Templatefile = <span style="color:#e6db74">&#39;.\MoveSubscription.bicep&#39;</span>
    TemplateParameterObject = @{
        TargetMgId = <span style="color:#e6db74">&#39;Corp&#39;</span>
        subscriptionId = <span style="color:#e6db74">&#39;12345678-1234-1234-1234-123456789012&#39;</span>
    }
    Location = <span style="color:#e6db74">&#39;WestEurope&#39;</span>
    Name = <span style="color:#e6db74">&#39;MovingSubscriptionFoo&#39;</span>
}

New-AzTenantDeployment @Params
</code></pre></div><p>Notice that the parameters defined in the Bicep file was passed in the <em>TemplateParameterObject</em> parameter as a hashtable, to be consumed in the <em>Name</em> key in the Bicepfile.</p>
<p>For this use-case, deploying the Bicep feels like taking the long route, but getting used to working with Bicep is very useful for a lot of other use-cases.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Now you know how to deploy a management groups as code! By using the techniques above you can efficiently and repeatedly create management group structures and with a few lines of extra code you can also quickly move sets of subscriptions into the managementgroups. <strong>If you are interrested in a post about those scenarios, you can contact me on <a href="https://www.linkedin.com/in/peter-the-automator/">LinkedIn</a>.</strong></p>
]]></content>
        </item>
        
        <item>
            <title>Register and setup a free Azure Account</title>
            <link>https://theautomationdude.github.io/blog/posts/registerfreeazureaccount/</link>
            <pubDate>Mon, 10 Jan 2022 21:03:06 +0100</pubDate>
            
            <guid>https://theautomationdude.github.io/blog/posts/registerfreeazureaccount/</guid>
            <description>Register a Microsoft account If you don&amp;rsquo;t have a Microsoft account or simply want a separate account for learning, go to https://outlook.live.com/ to register a new account.
  Install Microsoft Authenticator on your mobile device https://www.microsoft.com/en-us/security/mobile-authenticator-app
  Sign in to your Microsoft account. Click the account icon in the top right corner of outlook and enter the profile settings for your account. Then choose Security from the menu in the top of the page.</description>
            <content type="html"><![CDATA[<ol>
<li>
<p>Register a Microsoft account
If you don&rsquo;t have a Microsoft account or simply want a separate account for learning, go to <a href="https://outlook.live.com/">https://outlook.live.com/</a> to register a new account.</p>
</li>
<li>
<p>Install Microsoft Authenticator on your mobile device <a href="https://www.microsoft.com/en-us/security/mobile-authenticator-app">https://www.microsoft.com/en-us/security/mobile-authenticator-app</a></p>
</li>
<li>
<p>Sign in to your Microsoft account. Click the account icon in the top right corner of outlook and enter the profile settings for your account. Then choose Security from the menu in the top of the page. Click <em>Add a new way to sign in or verify</em> and then select <em>Use An App</em>. Open Microsoft Authenticator and follow the steps to add this as authentication for your account.</p>
</li>
<li>
<p>Go to <a href="https://azure.microsoft.com/">https://azure.microsoft.com/</a> and click the <em>Free Account</em> button. Register the new Azure account with your Microsoft account. Microsoft requires a credit card to verify your identity, no money is drawn from the card, the card details are just validated. Once you have completed the registration process your Azure Account is ready for use.</p>
</li>
</ol>
<h1 id="managing-access">Managing access</h1>
<h3 id="the-global-administrator-role">The Global Administrator role</h3>
<p>The new Azure Active Directory tenant that has been created for you only has one user account to start with, the user account you used to signed up for Azure. This account has the Azure AD <em>Global Administrator</em> role, this role gives the user the privileges to manage identities and role assignments in Azure Active Directory, but by default no privileges are granted to anything else in Azure like <em>management groups</em>, <em>subscriptions</em>, <em>Resource groups</em> or any type of resources.</p>
<h3 id="separation-of-duties">Separation of duties</h3>
<p>Normally you would delegate the different roles to users with the responsibility to manage pieces of your Azure account, in order to separate duties and reduce the impact if a privileged identity gets compromised.</p>
<p>There are roles to administer the <strong>identity</strong> aspects of Azure (Azure Active Directory), like <em>User administrator</em>, these would be delegated to a helpdesk or access management team in a traditional It organization. These roles does not have any privileged access to the Azure resources in the account.</p>
<p>There are also Azure roles like <em>User Access Administrator</em> or <em>Owner</em> that have <strong>access to resources</strong> in the account, like Management Groups, Subscriptions, and all subordinate scopes. These roles has no privileged acces in Azure Active Directory. These roles can be used to delegate access control to Management groups, Subscriptions, Resource Groups or any Azure resources such as Virtual Machines, Storage, Networks, Containers, Functions or Apps, typically delegated down to your development teams.</p>
<p>The <em>Global Administrator</em> role is very powerful and can gain access to all other roles in your account by elevating access, this account must be well protected and should only be used for the very few tasks that require this role.</p>
<h1 id="elevate-your-account">Elevate your account</h1>
<p>You can elevate your <em>Global administrator</em> to give it access to the resources in Azure. Open <a href="https://aad.portal.azure.com/">Azure Active Directory Admin Center</a> and follow the instructions in <a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/elevate-access-global-admin">https://docs.microsoft.com/en-us/azure/role-based-access-control/elevate-access-global-admin</a>. (While you are at it, you can also set your custom name for your tenant) Basically you will elevate your user account to <em>User Access Administrator</em> in the root of the tenant in order to later assign roles to other users Management Group structure.</p>
<h3 id="enable-management-groups">Enable Management Groups</h3>
<p>In the portal, write &ldquo;Management Groups&rdquo;, to get to the Management Groups blade. Azure will ask if you want to start using management groups, and yes, that is exactly what you want. Enable management groups and then click the <em>Tenant root group</em>. 
<img src="tenantrootgroup.png" alt="tenantrootgroup.png">
Next you select <em>Access control (IAM)</em> and then <em>Add</em>, <em>Add role assignment</em>. <img src="rbac.png" alt="rbac.png">
Select the <em>Owner</em> role and then <em>Members</em>, now you can add the users that you want to have the <em>Owner</em> role for the <em>Tenant root group</em>, please be aware that they will have the owner privileges to everything in your Azure account, except Azure Active Directory. It&rsquo;s recommended to give this privilege only to the individuals that manages the management group structure and high level compliance like role and policy definitions. Then they can delegate the owner role on any scope under this one. Remember to follow the rule of least privilege access.</p>
<p>To provide a user Owner privileges to the root of the tenant you can use Powershell.</p>
<h4 id="i-recommend-the-powershell-method-over-using-the-azure-portal-especially-if-you-need-to-deploy-management-groups-in-the-tenant-root-group-with-powershell-i-have-experienced-issues-with-trying-to-do-it-with-the-portal">I recommend the PowerShell method over using the Azure Portal, especially if you need to deploy Management Groups in the Tenant Root Group with PowerShell (I have experienced issues with trying to do it with the portal).</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Powershell" data-lang="Powershell">New-AzRoleAssignment -Scope <span style="color:#e6db74">&#39;/&#39;</span> -RoleDefinitionName <span style="color:#e6db74">&#39;Owner&#39;</span> -SignInName <span style="color:#e6db74">&#39;usersigninname@thetenantname.onmicrosoft.com&#39;</span>
</code></pre></div><p>Remember to use the sign-in name you find for the user in the Azure Active Directory blade, since the sign-in name may differ if the user is created in another tenant from start.</p>
<p>For the purpose of learning and labs you can give all access to your single user, allthough that is not recommended for any production scenarios.</p>
<p>Once you have assigned the <em>Owner</em> role, you should go back to the Active Directory blade and disable the &ldquo;Access Management for Azure Resources&rdquo; to remove your account from the <em>User Access Administrator</em> role again. If you selected the same account as an Owner of the <em>Tenant root group</em>, you will still be able to manage resources in the account. If you selected another user, you will have to do any future steps in that user context instead.</p>
<p>You&rsquo;ll notice that Azure has created a single subscription that is now in the &ldquo;Tenant root group*, we can move this subscription into a management group later on, when the management group structure is deployed.</p>
<p><strong>That&rsquo;s it! You now have an Azure account to start getting some hands-on training!</strong></p>
<p>Next we will <a href="/blog/posts/managementgroups/">create a management group structure</a> as base of your Azure foundation!</p>
<p><strong>Stay tuned!</strong></p>
<p>/TheAutomationDude</p>
]]></content>
        </item>
        
        <item>
            <title>VSCode productivity features and keyboard shortcuts</title>
            <link>https://theautomationdude.github.io/blog/posts/vscodeproductivity/</link>
            <pubDate>Mon, 27 Dec 2021 15:30:22 +0100</pubDate>
            
            <guid>https://theautomationdude.github.io/blog/posts/vscodeproductivity/</guid>
            <description>When you get used to VSCode you will experience a boos to your productivity. Some repetitive tasks when writing code are drastically reduced, with language support, intellisense and more, you don&amp;rsquo;t even need to remember the syntax very well. Keyboard shortcuts is another important feature when coding, since you don&amp;rsquo;t want to take your hands off the keyboard to use the mouse too often.
Keyboard Shortcuts There is a keyboard shortcuts reference as https://code.</description>
            <content type="html"><![CDATA[<p>When you get used to VSCode you will experience a boos to your productivity. Some repetitive tasks when writing code are drastically reduced, with language support, intellisense and more, you don&rsquo;t even need to remember the syntax very well. Keyboard shortcuts is another important feature when coding, since you don&rsquo;t want to take your hands off the keyboard to use the mouse too often.</p>
<h2 id="keyboard-shortcuts">Keyboard Shortcuts</h2>
<p>There is a keyboard shortcuts reference as <a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a>, however these settings does not fit all keyboard layouts as they are for a US keyboard.<!-- raw HTML omitted -->
To edit your keyboard shortcuts you can press <code>[Ctrl+Shift+P]</code> then type <em>&ldquo;Preferences:Open Keyboard Shortcuts&rdquo;</em>. <!-- raw HTML omitted --></p>
<p>Keybindings will differ between keyboard layouts, I&rsquo;m using a Swedish keyboard layout, that differs quite from the american keyboard layout. Some non-US users actually buy US keyboards for coding just because some signs like  <code>[]' : /\ </code> and are much more easy to access in the US layout.</p>
<p>With that said, I recommend you to check out the keyboard shortcut settings in VSCode to check out the keyboard shortcuts that comes with your keyboard layout, and customize them to be easily accessible for you.</p>
<h2 id="show-command-palette">Show Command Palette</h2>
<p><code>[F1] / [Ctrl+Shift+P]</code><!-- raw HTML omitted --></p>
<p>The command palette is essiential to many functions that you will use in VSCode, such as Git: Clone, Setting Preferences and Help.</p>
<p><img src="commandpalette.png" alt="commandpalette"></p>
<h2 id="quick-open-go-to-file">Quick Open, Go to File&hellip;</h2>
<p>A quick way to open the file you want to work with.</p>
<p><code>[Ctrl+P]</code><!-- raw HTML omitted --></p>
<p><img src="open.png" alt="open"></p>
<h2 id="multi-line-editing-and-findreplace">Multi-line Editing and Find/Replace</h2>
<p>The first two are very standard search and replace funtions. But when you have tried &ldquo;replace in files&rdquo;, &ldquo;insert cursor&rdquo; and &ldquo;Select all occurences of current selection&rdquo; you will forever be annoyed with many other editors that miss this function. It&rsquo;s just very fast, useful and at the same time you get good control of what you are doing.</p>
<h3 id="find">Find</h3>
<p><code>[Ctrl+F]</code></p>
<h3 id="replace">Replace</h3>
<p><code>[Ctrl+H]</code></p>
<h3 id="replace-in-files">Replace in files</h3>
<p>This is a multi-file replace, very useful, but be careful!</p>
<p><code>[Ctrl+Shift+H]</code><!-- raw HTML omitted --></p>
<h3 id="insert-cursor">Insert Cursor</h3>
<p>You can select and edit multiple lines simoultaneously, it&rsquo;s awesome, try it out!<!-- raw HTML omitted --></p>
<p><code>[Alt+Click]</code><!-- raw HTML omitted --></p>
<p><img src="multiline.png" alt="multiline"></p>
<h3 id="select-all-occurences-of-current-selection">Select all occurences of current selection</h3>
<p>Just like you can set the cursor in multiple lines, you can select and edit all occurences of the string you have selected. Awesome when you have decided to rename something that is referred in multiple locations of your code.<!-- raw HTML omitted --></p>
<p><code>[Ctrl+Shift+L]</code><!-- raw HTML omitted --></p>
<p><img src="alloccurences.png" alt="alloccurences"></p>
<h2 id="cutting-pasting-moving-removing">Cutting, pasting, Moving, Removing</h2>
<h3 id="moves-rowsection-updown">Moves row/section up/down</h3>
<p>Instead of cut and paste you can move rows or sections of code up and down by simpler means. Great when you want to restructure things slightly.</p>
<h5 id="with-my-swedish-keyboard-layout"><em>With my Swedish keyboard layout</em></h5>
<p><code>[Alt+UpArrow] / [Alt+DownArrow]</code></p>
<h5 id="with-us-keyboard-layout"><em>With US keyboard layout</em></h5>
<p><code>[Shift+Alt+UpArrow] / [Shift+Alt+DownArrow]</code></p>
<h3 id="delete-section">Delete section</h3>
<p>Deletes an entire row/section.</p>
<p><code>[Shift+Delete]</code><!-- raw HTML omitted --></p>
<h3 id="cut-line-or-highlighted-area">Cut line or highlighted area</h3>
<p>Same as most windows based editors.</p>
<p><code>[Ctrl+X]</code><!-- raw HTML omitted --></p>
<h3 id="copy-line-or-highlighted-area">Copy line or highlighted area</h3>
<p>Same as most windows based editors.</p>
<p><code>[Ctrl+C]</code><!-- raw HTML omitted --></p>
<h3 id="paste">Paste</h3>
<p>Same as most windows based editors.</p>
<p><code>[Ctrl+V]</code><!-- raw HTML omitted --></p>
<h2 id="navigation">Navigation</h2>
<h3 id="go-to-startend-of-line">Go to start/end of Line</h3>
<p><code>[Home] / [End]</code></p>
<h3 id="go-to-startend-of-file">Go to start/end of file</h3>
<p><code>[Ctrl+Home/End]</code></p>
<h3 id="scroll-updown">Scroll Up/Down</h3>
<p><code>[Ctrl+Up] / [Ctrl+DownArrow]</code></p>
<h2 id="split-editor">Split Editor</h2>
<p>There are keyboard shortcuts for this one, but since I don&rsquo;t do that very frequently, I simply use the mouse to split the editor.<!-- raw HTML omitted --></p>
<p><img src="spliteditor.png" alt="spliteditor"></p>
<h3 id="focus-into-editor-group-123">Focus into editor group 1/2/3</h3>
<p>Your split editor has groups, use this command to shift focus between them. &ldquo;n&rdquo; is the number of your group, to shift focus to group 2 you press <code>[Ctrl+2]</code></p>
<p><code>[Ctrl+n]</code><!-- raw HTML omitted --></p>
<h2 id="jump-to-definition">Jump to definition</h2>
<p>This a super-useful feature, when you are on a line of your code and need to jump to the code section where used variable/object or function is being defined, you can mark the name of that variable/object/function and VSCode will jump the cursor into that definition.</p>
<p>Look at this example, I was standing on the word <em>MyFunction2</em> in line 26, marked <em>MyFunction2</em> and then pressed <strong>F12</strong>. VScode jumped to line 9 where <em>MyFunction2</em> is declared. <!-- raw HTML omitted --></p>
<p><code>[F12]</code><!-- raw HTML omitted --></p>
<p><img src="jumptodef.png" alt="jumptodefinition"> <!-- raw HTML omitted --></p>
<p>If I would have been on the word <em>$var1</em> VSCode would have sent me to line 17 instead, where <em>$var1</em> was declared. Great isn&rsquo;t it!?</p>
<h3 id="peek-definition">Peek Definition</h3>
<p>Maybe you just want to see the definition, not jump there&hellip; This brings up a quick peek window showing the definition, below your highlighted code.<!-- raw HTML omitted --></p>
<p><code>[Alt+F12]</code><!-- raw HTML omitted --></p>
<p><img src="peekdef.png" alt="peekdefinition"></p>
<h3 id="peek-definition-to-the-side">Peek definition to the side</h3>
<p>Now that feature gets even better! By pressing first Ctrl+K, then releas and press F12 VScode will open up the file with the definition in a new editor to the side and jump to the definition. Now you can compare how you call the function with how it was defined, very good for troubleshooting.<!-- raw HTML omitted --></p>
<p><code>[Ctrl+K] [F12]</code><!-- raw HTML omitted --></p>
<p><img src="jumptodefside.png" alt="peekdefinitionside"></p>
<h2 id="zooming-in-and-out">Zooming in and out</h2>
<p>You can adjust the amount of zoom to personal preference
On my keyboard it&rsquo;s just <code>[Ctrl+]</code> or <code>[Ctrl-]</code> to zoom in and out.</p>
]]></content>
        </item>
        
        <item>
            <title>Using Git version control in VSCode</title>
            <link>https://theautomationdude.github.io/blog/posts/gitinvscode/</link>
            <pubDate>Thu, 16 Dec 2021 21:48:27 +0100</pubDate>
            
            <guid>https://theautomationdude.github.io/blog/posts/gitinvscode/</guid>
            <description>In a previous post I wrote about how to install git on the windows operating system. And another post was about how to get up and running with VSCode. This post will cover some basics on how to work with git, especially in VSCode.
To contribute to a software project, you can clone a repository and then push new code that you have authored to it. Normally this is done by working in different branches, where the main or master branch normally contains the version of the code that will be pushed to the production environment, while all developers work in other branches that get merged into the master/main branch.</description>
            <content type="html"><![CDATA[<p>In a previous post I wrote about how to <a href="/blog/posts/installgit/">install git on the windows operating system</a>. And another post was about how to <a href="/blog/posts/gettingupandreadywithvscode/">get up and running with VSCode</a>. This post will cover some basics on how to work with git, especially in VSCode.</p>
<p>To contribute to a software project, you can clone a repository and then push new code that you have authored to it. Normally this is done by working in different branches, where the main or master branch normally contains the version of the code that will be pushed to the production environment, while all developers work in other branches that get merged into the master/main branch. This way development can be version controlled and be tested without being introduced to the master branch before it&rsquo;s ready.</p>
<h2 id="git-config">Git config</h2>
<p>To collaborate with others in Git you must first set some user settings. Open a shell (powershell, vscode integrated shell or the command shell), then type.</p>
<p><code>git config --global user.name &quot;My Name&quot;</code></p>
<p>(use your own name of course)</p>
<p><code>git config --global user.email &quot;my.email@domain.com&quot;</code></p>
<p>(use your own email of course)</p>
<h2 id="getting-the-repository-clone-url">Getting the repository clone URL</h2>
<p>Go to the repository you want to clone, in this tutorial I&rsquo;ll use Github, but it&rsquo;s pretty much the same in Azure DevOps and Gitlab (and probably all the other flavours of version control repository management services out there).</p>
<p>In the repository you click the code/clone button, this will copy the clone URL that you will use in Git cli or VSCode.</p>
<p><img src="./clone.jpg" alt="CloneURL"></p>
<h3 id="now-you-can-either-clone-the-repository-by-using-git-command-line-interface-cli-or-by-using-the-vscode-graphical-user-interface-gui">Now you can either clone the repository by using Git command line interface (cli), or by using the VSCode graphical user interface (GUI).</h3>
<h2 id="clone-an-existing-repository-with-vscode">Clone an existing repository with VSCode</h2>
<p>In VSCode, you press <em>Ctrl+Shift+P</em> to open up the VSCode command palette.</p>
<p><img src="./gitclone.jpg" alt="VSCode Clone"></p>
<p>Now type Git: Clone and then VSCode will ask you for the cloning url that you copied from the repository clone button.</p>
<p><img src="./cloneurlvscode.jpg" alt="VSCode CloneURL"></p>
<p>Paste the url in the box and then select the folder where you want to store your local replica of the repository, the repository will unpacked into a subfolder to this folder that has the same name as the repository. VSCode will ask if you want to add this repository to the current workspace or open it in a new window, personally I prefer using one window per repository that I&rsquo;m working with.</p>
<h2 id="clone-an-existing-repository-with-git-cli">Clone an existing repository with Git cli</h2>
<p>Use whatever command (or alias) that rocks your boat to set the folder where you want the repository to be cloned into as your current working directory. In this example we will clone to the <em>ClonedRepos</em> folder in the user home folder.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd ~<span style="color:#ae81ff">\C</span>lonedRepos
</code></pre></div><p>or</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Powershell" data-lang="Powershell">Set-Location ~\ClonedRepos
</code></pre></div><p>(useful aliases for Set-Location are sl or cd)</p>
<h4 id="now-clone-the-repo-with-the-git-clone-command-and-pasting-in-the-repository-clone-url">Now clone the repo with the git clone command and pasting in the repository clone url.</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone &lt;your cloneurl pasted here&gt;
</code></pre></div><h2 id="using-vscode">Using VSCode</h2>
<p>Most Git commands can be issued by using the GUI in VSCode source control. It&rsquo;s working well and you won&rsquo;t need to learn the Git syntax or commands, you can just focus on the concepts like branches, commits, stash, push, pull, merge etc. that Git has. I recommend anyone new to Git to go down the VSCode GUI route, just to get used to working with it and you can learn the Git cli later if needed. I don&rsquo;t use the git cli much at all, don&rsquo;t see much need for it. Here&rsquo;s some pictures showing the different buttons for the features that are described with git cli commands below.</p>
<p><img src="vscodesourcecontrol.jpg" alt="VSCode source control"></p>
<p>By clicking the &lsquo;+&rsquo; symbol a change is added to the staging area. If you hoover over the change in the staging area a &lsquo;-&rsquo; symbol will show, clicking this moves the change back from staging to tracked changes. To add all changes you can select the + in the folder structure of the source control, or just make an empty commit, then VSCode will ask if you want to apply all changes in this commit.</p>
<p>By right clicking changes you get some additional options that don&rsquo;t have buttons. Also note that you can discard changes, that means that the changes are removed from the file(s), if you then save the file, the changes are lost forever&hellip;</p>
<p><img src="stash.jpg" alt="Stash"></p>
<p>By clicking the three dots &lsquo;&hellip;&rsquo; in the top of the repo control you get another menu with options such as creating and managing branches.</p>
<p><img src="branch.png" alt="Branch"></p>
<p>In the bottom you have expandable sections where you can view and manage your commits, branches, remotes, file history and stashes. For example you can switch branch, delete branches, apply stash and more. Some of these functions are also available in the main source control section at the top.</p>
<p><img src="switchbranch.png" alt="VSCode source control"></p>
<h2 id="branches">Branches</h2>
<p>By default you are working in the main or master branch. But best practise is to work with changes related to a feature or fix in a separate branch.</p>
<h5 id="create-two-new-branches-called-feature1--feature2">Create two new branches called feature1 &amp; feature2</h5>
<p><code>git branch feature1</code></p>
<p><code>git branch feature2</code></p>
<h5 id="switch-to-branch-feature1">Switch to branch feature1</h5>
<p><code>git switch feature1</code></p>
<h5 id="show-branches-your-current-is-in-green-with-an-asterisk--in-front">Show branches (your current is in green with an asterisk (*) in front)</h5>
<p><code>git branch</code></p>
<h5 id="remove-branch-feature2">Remove branch feature2</h5>
<p><code>git branch --delete feature2</code></p>
<h2 id="stage-changes-for-commit">Stage changes for commit</h2>
<p>When you have edited and saved a file and want to add it to a commit you add it to the staging area.</p>
<h5 id="use-the-git-add-command">Use the git add command.</h5>
<p><code>git add mymarkdowncode.md</code></p>
<p>Just remember that you must specify the path to the file if it&rsquo;s not in the present working directory that you are in.</p>
<p><code>git add ./notes/mymarkdowncode.md</code></p>
<p>You can also add all files in a directory at once.</p>
<p><code>git add .</code></p>
<p><code>git add ./notes/.</code></p>
<p>Just remember that Git only adds changed files to the commit, this also includes changes to the path of the files (and folders if you have a .gitkeep file in the folder).</p>
<h2 id="remove-changes-from-staging-area">Remove changes from staging area</h2>
<p>Sometimes you add changes by mistake or simply just want to exclude a few changes, then you can remove changes from the staging area back to change tracking.</p>
<h5 id="single-file">Single file</h5>
<p><code>git reset mymarkdowncode.md</code></p>
<h5 id="every-file-in-the-staging-area">Every file in the staging area</h5>
<p><code>git reset</code></p>
<h2 id="stash-the-changes">Stash the changes</h2>
<p>Sometimes you work in two different branches of the same repository. Trust me, it&rsquo;s easy to mess things up when juggling between two branches, I don&rsquo;t recommend doing that if you can focus on just one branch at a time instead.</p>
<p>But if you realize that you have done some changes relating to one feature or part of your project that you are not ready to commit, you can stash them instead and then switch to another branch to make changes that should be committed to that branch, then commit those changes and switch back to the first branch where you stashed some changes. Now check out the changes again, continue editing where you left off and then you can commit the code to this branch.</p>
<h5 id="stash-all-changes-in-current-branch">Stash all changes in current branch</h5>
<p><code>git stash</code></p>
<h5 id="list-the-stash">List the Stash</h5>
<p><code>git stash list</code></p>
<h5 id="show-the-files-in-the-stash">Show the files in the stash</h5>
<p><code>git stash show</code></p>
<h5 id="apply-the-stash-in-current-branch">Apply the stash in current branch</h5>
<p><code>git stash apply</code></p>
<h2 id="commit">Commit</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">
git commit -<span style="color:#e6db74">&#39;Changed feature Myfeature
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">Feature Myfeature got five changes
</span><span style="color:#e6db74">1
</span><span style="color:#e6db74">2
</span><span style="color:#e6db74">3
</span><span style="color:#e6db74">4
</span><span style="color:#e6db74">5
</span><span style="color:#e6db74">&#39;</span>
</code></pre></div><p>The commit message should describe what this change was about, the first row will be the headline and if you want to add more details about the changes you leave a blank line and it will only show up when someone wants to read the details for the commit.</p>
<h2 id="push">Push</h2>
<p>Push allows you to push changes from one branch to a remote branch.</p>
<h5 id="push-your-local-changes-to-the-repository-server">Push your local changes to the repository server.</h5>
<p><code>git push</code></p>
<h2 id="pull">Pull</h2>
<p>Pull allows you to pull changes from a remote branch to your local branch.</p>
<h5 id="pull-changes-from-the-repository-server">Pull changes from the repository server.</h5>
<p><code>git pull</code></p>
<h2 id="merge">Merge</h2>
<p>When you want to merge changes from one branch to another branch you use merge. Move to the branch you want to merge changes to.</p>
<h5 id="merge-feature1-branch-into-main-branch">Merge feature1 branch into main branch</h5>
<p><code>git switch main</code></p>
<p>(Only needed  if you are not currently in the main branch)</p>
<p><code>git merge feature1</code></p>
<h2 id="conclusion">Conclusion</h2>
<p>There is a learning curve to get used to working with Git, but you don&rsquo;t need to learn everything at once. To start with you may just want to setup your own repo in Github, clone it to your machine, and make your commits to the main/master branch. Then you can gradually make it more advanced with different branches etc. As I mentioned above, there is little to no reason to start learning the git cli, VSCode has a good Git integration and it&rsquo;s better to understand the git concepts than trying to learn the commands.</p>
<p><strong>Next I&rsquo;ll write about some useful keyboard shortcuts and features in VSCode that will boost your productivity and make your life easier! Happy Coding!</strong></p>
<p>/TheAutomationDude</p>
]]></content>
        </item>
        
        <item>
            <title>Getting up and ready with VSCode</title>
            <link>https://theautomationdude.github.io/blog/posts/gettingupandreadywithvscode/</link>
            <pubDate>Sun, 12 Dec 2021 09:48:44 +0100</pubDate>
            
            <guid>https://theautomationdude.github.io/blog/posts/gettingupandreadywithvscode/</guid>
            <description>When you are authoring or editing any type of code or markdown text, VSCode can be a powerfull ally. It will give you syntaxt highlighting and intellisense for most modern programming languages and there is a wide set of extensions to make your life easier. If that wasn&amp;rsquo;t enough, VSCode also has built-in support for Git, meaning that you don&amp;rsquo;t need to learn all the Git commandline syntax and you get a visualization of your branches, commits, staged changes and stash.</description>
            <content type="html"><![CDATA[<p>When you are authoring or editing any type of code or markdown text, VSCode can be a powerfull ally. It will give you syntaxt highlighting and intellisense for most modern programming languages and there is a wide set of extensions to make your life easier. If that wasn&rsquo;t enough, VSCode also has built-in support for Git, meaning that you don&rsquo;t need to learn all the Git commandline syntax and you get a visualization of your branches, commits, staged changes and stash. It also has a debugger to help you debug your code.</p>
<p>VSCode is open-source, developed and maintained by Microsoft with support from a vibrant community. The fact that it&rsquo;s free with no need for a license and at the same time very powerful has made it a immensely popular code editor. It&rsquo;s also the editor provided in Github Codespaces and also available in the Azure Cloud Shell.</p>
<h2 id="installation">Installation</h2>
<p>You can download VSCode from <a href="https://code.visualstudio.com/">https://code.visualstudio.com</a> and the installation can be done <strong>without</strong> any administrator equivalent privileges.</p>
<h2 id="first-some-useful-settings">First some useful settings</h2>
<p>To open settings first bring up the VSCode command mode by pressing Ctrl+Shift+P, the write <em>Settings</em> and select <em>&ldquo;Preferences: Open Settings UI&rdquo;</em> from the list.
<img src="./settings.jpg" alt="Settings"></p>
<p>Go down to the <em>Text Editor</em> menu item, Now find the setting <em>Bracket Pair Colorization:</em> <strong>Enabled</strong> and tick the box.
Next go down to <em>Guides: Bracket Pairs</em> - Set it to True
This will give all your bracket pairs different colors and also show a guide that visualises the level you are on in your code.
<img src="./brackets.jpg" alt="Bracket Settings"></p>
<h2 id="extensions">Extensions</h2>
<p>There are tons of useful extensions for VSCode, and I use more than I write in this list depending on what kind of project I&rsquo;m working on. Too many extensions may slow VSCode down and sometimes the effects are not very good, try to keep it civil&hellip; For my series of blogposts I&rsquo;ll recommend as a minimum to have at least:</p>
<ul>
<li><strong>Powershell</strong> Your essentials for the Powershell language, Debugger, Intellisense, Syntax highlighting, integrated console and more.</li>
<li><strong>Bicep</strong> A must have when authoring Azure Bicep templates, provides Intellisence, Syntax Highlighting and more.</li>
<li><strong>Path Intellisense</strong> VSCode helps you with autocompleting paths in your code, as long as the path is relative in your local filesystem.</li>
<li><strong>GitLens</strong> Visualises Git for you, totally recommend it for anyone that isn&rsquo;t well versed with the Git cli.</li>
<li>Bracket Pair Colorizer is really nice, but you don&rsquo;t really need it if you have done the bracket settings I&rsquo;ve shown. I don&rsquo;t use it anymore.</li>
</ul>
<p>Now you should have VSCode ready for your first steps with Powershell and Azure.</p>
<p><strong>Next we&rsquo;ll do some Git basics in VSCode! Happy Coding!</strong></p>
<p>/TheAutomationDude</p>
]]></content>
        </item>
        
        <item>
            <title>Install Git version control on a Windows PC</title>
            <link>https://theautomationdude.github.io/blog/posts/installgit/</link>
            <pubDate>Tue, 07 Dec 2021 17:44:31 +0100</pubDate>
            
            <guid>https://theautomationdude.github.io/blog/posts/installgit/</guid>
            <description>Whether you are developing applications, scripts or authoring Infrastructure As Code such as ARM, Bicep, Cloudformation, Google Cloud Deployment Manager or Terraform -templates, version control is important and at the heart of the DevOps toolkit. The most popular and widely adopted version control tool is Git, developed by Linus Torvalds – the inventor of the Linux kernel.
If you work in VSCode, you won&amp;rsquo;t need to learn the git-cli commands, since VSCode has built-in support for git.</description>
            <content type="html"><![CDATA[<p>Whether you are developing applications, scripts or authoring Infrastructure As Code such as ARM, Bicep, Cloudformation, Google Cloud Deployment Manager or Terraform  -templates, version control is important and at the heart of the DevOps toolkit. The most popular and widely adopted version control tool is Git, developed by Linus Torvalds – the inventor of the Linux kernel.</p>
<p>If you work in VSCode, you won&rsquo;t need to learn the git-cli commands, since VSCode has built-in support for git.</p>
<h2 id="here-is-a-simple-guide-to-installing-git-on-a-windows-operating-system">Here is a simple guide to installing git on a Windows operating system.</h2>
<p>Download the git installer from <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> and start the installation.</p>
<p>In the first Screen there is a some information about the GNU public license, just click &lsquo;Next&rsquo; (or read through it if you wish).</p>
<h3 id="git-components-to-install">Git components to install</h3>
<p><img src="./components.jpg" alt="Components selection"></p>
<p>I ususally just accept the default components and click &lsquo;Next&rsquo;.</p>
<h3 id="text-editor-for-git">Text editor for git</h3>
<p><img src="./editor.jpg" alt="Editor Selection"></p>
<p>This sets what text editor git will use when you need to resolve things like merge conflicts. I prefer to use the nano editor for git, vim is a steep learning curve if you are not used to it. Since I use the VSCode support, this setting doesn&rsquo;t have much effect.</p>
<h3 id="default-initial-branch">Default initial branch</h3>
<p><img src="./defaultbranch.jpg" alt="Default initial branch"></p>
<p>Let Git decide the name of the intial branch in newly created repos (master is default for now, but both master and main are commonly used)</p>
<h3 id="path-variable-modifications">PATH Variable modifications</h3>
<p><img src="./path.jpg" alt="Path"></p>
<p>Now you get the question how you want to use git (what modifications git will do to your PATH variable), you should use the recommended setting since you want to be able to use git in your powershell session and VSCode.</p>
<h3 id="ssh-client">SSH Client</h3>
<p><img src="./ssh.jpg" alt="SSH"></p>
<p>Next choice is the secure shell (ssh) client to use, unless you have another installed I suggest you use the OpenSSH client bundled with git.</p>
<h3 id="ssltls">SSL/TLS</h3>
<p><img src="./ssl.jpg" alt="SSL/TLS"></p>
<p>Now you can choose what ssl/tls library to use for webrequests. If you want to make use of the the internal company CA certificates and trusted roots I suggest you use the native windows certificate store.</p>
<h3 id="line-endings">Line endings</h3>
<p><img src="./lineendings.jpg" alt="Line endings"></p>
<p>If you didn&rsquo;t already know, different operating systems use different control characters to end a line, this actually goes back to the era of the mechanical typewriter, Scott Hanselman explains it very well in this <a href="https://www.youtube.com/watch?v=TtiBhktB4Qg">Video</a>.</p>
<p>In short Windows uses CR (Carriage Return)) + LF (Line Feed) while the Linux and Unix family uses only LF and some Apple operating systems use only CR. What a complex world we live in!</p>
<p>Now git will help you with converting new lines to be compatible with other operating systems. Use the recommended setting to have your code being committed to the repository with the LF, and checked out with CR+LF. This will be seamless to you, everything will be just as usual while you work on your Windows operating system, it&rsquo;s like magic!</p>
<h3 id="terminal-emulator">Terminal emulator</h3>
<p><img src="./terminal.jpg" alt="Terminal"></p>
<p>Since I don&rsquo;t use git bash, this makes no real difference to me, so I use the default MinTTY.</p>
<h3 id="git-pull-behaviour">Git pull behaviour</h3>
<p><img src="./pullbehaviour.jpg" alt="Git Pull behaviour"></p>
<p>To understand this setting you need to dive into the strategies that git has for pulling and merging changes between branches. The default setting is to Fast-Forward or Merge and you can safely use that setting.</p>
<h3 id="credential-manager">Credential manager</h3>
<p><img src="./credentialhelper.jpg" alt="Credential manager"></p>
<p>I haven&rsquo;t used the git credential manager so far, but I let git install it anyway.</p>
<h3 id="extra-options">Extra options</h3>
<p><img src="./extraoptions.jpg" alt="Extra Options"></p>
<h3 id="experimental-options">Experimental options</h3>
<p><img src="./experimentaloptions.jpg" alt="Experimental options"></p>
<p>Now you can click install and get on with your life!</p>
<p><strong>Next is setting up VSCode and cloning your first repository, stay tuned for the next blogpost!</strong></p>
<p>/TheAutomationDude</p>
]]></content>
        </item>
        
        <item>
            <title>How setup Powershell for Azure</title>
            <link>https://theautomationdude.github.io/blog/posts/setupazpowershell/</link>
            <pubDate>Thu, 02 Dec 2021 17:22:08 +0100</pubDate>
            
            <guid>https://theautomationdude.github.io/blog/posts/setupazpowershell/</guid>
            <description>If you are using the Azure Cloud shell, you already have a useful powershell environment setup for you there by Microsoft&amp;hellip;
But it&amp;rsquo;s not that unusual that employers want to keep all your code in a repo that is company controlled and where your teammates can access your files, and that repo may not always be directly accessible from the cloud shell.
For that purpose, you might want to setup your own Powershell environment on the computer you work from.</description>
            <content type="html"><![CDATA[<p>If you are using the Azure Cloud shell, you already have a useful powershell environment setup for you there by Microsoft&hellip;</p>
<p>But it&rsquo;s not that unusual that employers want to keep all your code in a repo that is company controlled and where your teammates can access your files, and that repo may not always be directly accessible from the cloud shell.</p>
<p>For that purpose, you might want to setup your own Powershell environment on the computer you work from. I&rsquo;ll go through this step by step in a series of tiny blog posts.</p>
<h2 id="installing-powershell-7">Installing Powershell 7</h2>
<p>Getting and installing the package is a bit different depending on Operating system, but Microsoft have you covered for many of the flavours. Just choose your flavour in this <a href="https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell?view=powershell-7.2">link</a> and follow the instructions.</p>
<h2 id="getting-the-az-powershell-module">Getting the Az Powershell module</h2>
<p>Installing a Powershell module is easy and can be done in more than one way. I suggest you try a multi step approach if you are new to powershell and not too sure of what you are doing.</p>
<p>Open up Powershell and type:</p>
<p><code>Find-Module -Name Az</code></p>
<p>You should get something like this:</p>
<p><img src="./SetupAzPowershell.jpg" alt="Module found!"></p>
<p>Now you know that the correct module was found in the PSGallery.</p>
<p>Now go ahead and install the module, since we know that the Find-Module command returned the exact module that we wanted, we can take the output from Find-Module and send it through the pipeline (|) to the Install-Module command. We&rsquo;ll add the -Scope parameter and set the scope to CurrentUser, that way we avoid any need to elevate our privileges to install the module.</p>
<p><code>Find-Module -Name Az | Install-Module -Scope CurrentUser</code></p>
<p>Sometimes there are commands that conflict, then you might need to add the -AllowClobber and -Force parameters</p>
<p><code>Find-Module -Name Az | Install-Module -Scope CurrentUser -AllowClobber -Force</code></p>
<p>Powershell will tell you that the repository is untrusted since psgallery is not configured to be trusted (and they are damn right, don&rsquo;t trust everything in there!). Powershell asks you to confirm that you want to continue with installation of the module, press &ldquo;a&rdquo; to go on.</p>
<p>The installation will take a while and when it&rsquo;s done it should look like this, with no errors.</p>
<p><img src="./AzModuleInstalled.jpg" alt="Az Module Installed!"></p>
<p>Now you can connect to Azure:</p>
<p><code>Connect-AzAccount</code></p>
<p>A web browser will open and you will be asked to authenticate to Azure.</p>
<p>Once you are authenticated you can start exploring the Powershell commands in the Az module.</p>
<p>To list the commands of a module (in this example the Az.Resources module) you can type:</p>
<p><code>get-command -Module Az.Resources | more</code></p>
<p>Please note that the Az module is a compilation of many modules, that&rsquo;s why this example just takes the commands in the Az.Resources module.</p>
<p><strong>Happy Powershelling and stay tuned for the next blogpost!</strong></p>
<p>/TheAutomationDude</p>
]]></content>
        </item>
        
        <item>
            <title>What are the reasons for cloud adoption?</title>
            <link>https://theautomationdude.github.io/blog/posts/whycloud/</link>
            <pubDate>Mon, 22 Nov 2021 12:22:08 +0100</pubDate>
            
            <guid>https://theautomationdude.github.io/blog/posts/whycloud/</guid>
            <description>The truth is, there are many reasons to use a cloud service, and the priority of those reasons will vary from case to case. But it&amp;rsquo;s important to know these reasons, and how you prioritize them, since they are the drivers of the cloud journey. By understanding which reasons that are most important to your mission, it will help your decision-making process.
Some examples of decisions impacted by these drivers:</description>
            <content type="html"><![CDATA[<p><img src="./clouds.jpg" alt="Clouds"></p>
<p>The truth is, there are many reasons to use a cloud service, and the priority of those reasons will vary from case to case. But it&rsquo;s important to know these reasons, and how you prioritize them, since they are the drivers of the cloud journey. By understanding which reasons that are most important to your mission, it will help your decision-making process.</p>
<p>Some examples of decisions impacted by these drivers:</p>
<ul>
<li>Whether to Use cloud or not?!</li>
<li>Which cloud provider to choose</li>
<li>Your operational model, traditional IT-operations teams, or adopting &ldquo;you build it, you run it&rdquo; model with a centre of excelence / cloud adoption team</li>
<li>Adopt Infrastructure As Code (IaC) or just use a portal (graphical user interface)</li>
<li>Choosing level of governance and security</li>
</ul>
<p>There will always be trade-offs with different approaches to this and by being clear to what your motives are, it will be easier to focus on what you need to implement for your environment.</p>
<p>Now, to some strong reasons to embark on a cloud journey.</p>
<h3 id="low-investment">Low Investment</h3>
<p><img src="./money.jpg" alt="Money">
There is a huge upfront cost when building or modernizing a traditional on-prem datacenter. Consider all the things you need to have in place, like cooling, fire protection, a strong Powergrid, servers, switches, routers, storage etc. On top of that you need to hire staff to build and maintain all those things. When you buy services in the cloud, all that has been done by the cloud provider, you only need to have staff to manage the &ldquo;software defined&rdquo; layers of the stack. If your company is a start-up, the low investment is reducing the financial risk in case the business doesn&rsquo;t go in line with plans.</p>
<h3 id="scalable-business-model">Scalable Business model</h3>
<p><img src="./scalable.jpg" alt="Scalable">
Many companies consider the ability to scale the costs of their IT with the demand on their services a strong business advantage. A cloud has really neat ways to do this, as you can spin up and down resources based on demand, - and the cloud will give you tools to do it automatically.</p>
<h3 id="fast-road-to-redundancy-and-disaster-recovery">Fast road to redundancy and disaster recovery</h3>
<p><img src="./resilience.jpg" alt="Resilience">
Getting redundancy and disaster recovery capabilities in traditional IT infrastructure used to be associated with a very costly investment and used to be available mostly for enterprise scale environments. When using the cloud these investments have lowered severely and things that used to be very uncommon, like disaster recovery cross continents, has been made available for both big and small organisations.</p>
<p>I actually worked with a site to site (cross continent) disaster recovery project many years back, before cloud solutions had any wide spread.It was much more complex to get all the bits and pieces in place than most can imagine. You need datacenters in both locations of course, but you also need servers, clusters, storage and network that is setup in the same way in both locations. Then you need to consider the wide area network, latency and bandwidth, replication queues, etc. Doing the same in a public cloud is so much easier.</p>
<h3 id="zero-trust-security">Zero Trust security</h3>
<p>Another thing that has changed is how we perceive security. Security used to have a strong network focus, where the internal network used to be considered safe. That perception is changing and now the focus has shifted to make the services themselves more secure and not to trust everything on the internal network. Identity is taking over the role of being the security boundary that was the internal network. In the cloud this mindset becomes the default behaviour, since your systems will have more exposure.</p>
<h3 id="time-to-market-time-to-market-time-to-market">Time to market, time to market, time to market</h3>
<p><img src="./datacenter.jpg" alt="Datacenter">
The time to market is probably the most common driver for cloud adoption. Organisations want their software to hit the market as early as possible, and then iterate on new features and release them as quickly as possible, and keep doing that over and over. The software development process has traditionally been a bit slow and the software has to pass many gates before being deployed to production. Usually, a piece of code has to undergo unit-tests, integration tests, acceptance tests and approvals, if any of these gates have issues the software developer has to re-iterate the whole process again. If the process is slow, the developer loses time, flow and focus. The tests are not suitable to do in the production environment, therefore identical environments are needed to carry out the tests.</p>
<p>With continuous integration and continuous deployment tools this process can be automated and get much speedier. However, to reach this level of automation, the cloud has a big role to play. With Infrastructure as Code a new environment can be deployed within minutes and be removed just as fast. A template of the environment can be re-used to deploy a new environment for each gate in the process and some of these steps can even run in parallel on identical environments. When it&rsquo;s ready to be released, the same template can be re-used to build a new production environment, identical to the environments where the tests ran.</p>
<p><strong>Now, some will say that you can do this in your on-prem environment</strong></p>
<p>Yes&hellip; and no&hellip;</p>
<p>In traditional IT, it can take weeks or months to order a new server, rack it, connect it, install the operating system, configure everything and get it ready for service. From there on the server is treated like a pet, regular maintenance and efforts are put into keeping the server configuration from drifting as the machine is being used. Keeping the production and test environments in sync is a very difficult task, especially as changes are first applied on the test server before being shipped to the production server.
Basically, the most reliable way to make the tests reliable is to rebuild the test server using scripts or configuration management tools to make it a clean environment after the tests. All this is of course time-consuming, slow and costly.</p>
<p>All this has changed with the wide adoption of automation and orchestration tools, but most organisations still have a long way to travel. With infrastructure defined as code and configuration also being defined as code, the process to rebuild servers is faster and more reliable, allowing it to be done more frequently and without effort. In the cloud platforms this is supported out of the box, in an On-prem environment there is significant work to get this level of automation in the environment.</p>
<p>The core of the datacenter such as networks, storage and compute have to be restructured and made programmatically manageable through API&rsquo;s (commonly REST-API&rsquo;s). Basically, the infrastructure components have to be seen as data or objects that can be manipulated. All these components have to be software defined, flexible and well organised to make it easy to consume.</p>
<p>Typically, an On-prem datacenter has a lot of technical debt that creates complex dependencies that will take much time and effort to sort-out, in my opinion it&rsquo;s too much work to transform existing infrastructure to fit this model. Building a new infrastructure on the side might be a viable option if you really really need to host in your own datacenter.</p>
<h2 id="next">Next&hellip;</h2>
<p>Thanks for reading this blog post, I hope you enjoyed it!
The <a href="../setupazpowershell">next</a> couple of blogposts will be about:</p>
<ul>
<li>Setup an environment to work in <strong>Azure with Powershell and VSCode and Git</strong></li>
<li><strong>Authoring Custom Azure Roles</strong></li>
<li><strong>Authoring Custom Azure Policies</strong></li>
<li><strong>Azure Blueprints</strong></li>
</ul>
<p><strong>Stay tuned for the next blogpost..</strong></p>
<p>/TheAutomationDude</p>
]]></content>
        </item>
        
    </channel>
</rss>
